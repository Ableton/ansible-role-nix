---
- name: Ensure nix user exists
  become: true
  user:
    name: "{{ nix_user }}"
    state: present
  register: nix_user_details

- name: Set fact for XDG user config dir
  set_fact:
    xdg_user_config_dir: "{{ lookup('env', 'XDG_CONFIG_HOME') }}"

# The lookup module does have a default parameter, but we can't use Jinja2 templates there
- name: Use fallback default for XDG user config dir
  set_fact:
    xdg_user_config_dir: "{{ nix_user_details.home }}/.config"
  when: xdg_user_config_dir == ""

- name: Ensure nix user config dir exists
  become: true
  file:
    path: "{{ xdg_user_config_dir }}/nix"
    state: directory
    owner: "{{ nix_user }}"
    mode: "0755"
  register: nix_config_dir

- name: Ensure nix directory exists
  become: true
  file:
    path: "/nix"
    owner: "{{ nix_user }}"
    state: directory
    mode: "0755"
  register: nix_directory

- name: Install nix
  block:
    - name: Download installer script
      get_url:
        url: "https://nixos.org/nix/install"
        dest: "{{ nix_script_dir }}/install_nix.sh"
        mode: "0755"

    - name: Run installer script
      become: true
      become_user: "{{ nix_user }}"
      # TODO: Remove this suppression when ansible-lint learns to parse block conditions
      # See: https://github.com/ansible/ansible-lint/issues/1894
      command: "{{ nix_script_dir }}/install_nix.sh"  # noqa no-changed-when
  when: nix_directory is changed  # noqa no-handler

- name: Set up nix flakes
  block:
    - name: See if nix configuration file exists
      stat:
        path: "{{ nix_config_dir.path }}/nix.conf"
      register: nix_config_file

    - name: Slurp config file contents
      slurp:
        path: "{{ nix_config_dir.path }}/nix.conf"
      register: nix_config_file_contents
      when: nix_config_file.stat.exists

    - name: Install nix flakes package
      become: true
      become_flags: "--login"
      become_user: "{{ nix_user }}"
      # We need to use shell instead of command because of the above --login flag, since
      # nix-env isn't in the default path.
      shell: "nix-env -iA nixpkgs.nixFlakes"  # noqa command-instead-of-shell
      when: >
        not nix_config_file.stat.exists
        or "nix-command flakes" not in nix_config_file_contents.content | b64decode

    - name: Enable nix flakes
      become: true
      become_user: "{{ nix_user }}"
      # Even though we are only adding a single line, we use blockinfile so we get
      # Ansible's markers to indicate it's a machine-managed file.
      blockinfile:
        path: "{{ nix_config_dir.path }}/nix.conf"
        block: "experimental-features = 'nix-command flakes'"
        insertafter: EOF
        owner: "{{ nix_user }}"
        mode: "0644"
        create: true
        state: present
  when: nix_flakes  # noqa no-handler
